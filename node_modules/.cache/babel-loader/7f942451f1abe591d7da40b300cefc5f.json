{"ast":null,"code":"import _slicedToArray from \"/Users/furkandemirturk/Desktop/merng-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/furkandemirturk/Desktop/merng-client/src/pages/login.js\";\nimport React, { useContext, useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { AuthContext } from '../context/auth';\nimport { UseForm } from '../util/hooks';\n\nfunction Login(props) {\n  const context = useContext(AuthContext);\n\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        errors = _useState2[0],\n        setErrors = _useState2[1];\n\n  const _UseForm = UseForm(loginUserCallback, {\n    username: '',\n    password: ''\n  }),\n        onChange = _UseForm.onChange,\n        onSubmit = _UseForm.onSubmit,\n        values = _UseForm.values;\n\n  const _useMutation = useMutation(LOGIN_USER, {\n    update(_, {\n      data: {\n        login: userData\n      }\n    }) {\n      console.log(userData);\n      context.login(userData);\n      props.history.push('/');\n    },\n\n    onError(err) {\n      console.log(err.graphQLErrors[0].extensions.exception.errors);\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n\n    variables: values\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        loginUser = _useMutation2[0],\n        loading = _useMutation2[1].loading;\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n  return React.createElement(\"div\", {\n    className: \"form-ui login-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Form, {\n    className: \"form-ui\",\n    onSubmit: onSubmit,\n    noValidate: true,\n    className: loading ? \"loading\" : \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Login\"), React.createElement(Form.Input, {\n    label: \"username\",\n    placeholder: \"Username..\",\n    name: \"username\",\n    value: values.username,\n    error: errors.username ? true : false,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(Form.Input, {\n    type: \"password\",\n    label: \"Password\",\n    placeholder: \"Password..\",\n    name: \"password\",\n    error: errors.password ? true : false,\n    value: values.password,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    primary: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Login\")), Object.keys(errors).length > 0 && React.createElement(\"div\", {\n    className: \"ui error message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, Object.values(errors).map(value => React.createElement(\"li\", {\n    key: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, value)))));\n} //firs define data type \n//second define register input and asign the variables which you defined at first step\n//third return callback\n\n\nconst LOGIN_USER = gql`\n    mutation login(\n        $username : String!\n        $password : String!\n    ){\n        login(\n            \n                username: $username\n                password: $password\n            \n        ){\n            id email username createdAt token \n        }\n    }\n`;\nexport default Login;","map":{"version":3,"sources":["/Users/furkandemirturk/Desktop/merng-client/src/pages/login.js"],"names":["React","useContext","useState","Form","Button","gql","useMutation","AuthContext","UseForm","Login","props","context","errors","setErrors","loginUserCallback","username","password","onChange","onSubmit","values","LOGIN_USER","update","_","data","login","userData","console","log","history","push","onError","err","graphQLErrors","extensions","exception","variables","loginUser","loading","Object","keys","length","map","value"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react'\nimport {Form, Button} from 'semantic-ui-react'\nimport gql from 'graphql-tag'\nimport {useMutation} from '@apollo/react-hooks'\nimport {AuthContext} from '../context/auth'\nimport {UseForm} from '../util/hooks'\n\nfunction Login(props) {\n    \n    const context = useContext(AuthContext)\n    const [errors, setErrors] = useState({})\n\n    const {onChange, onSubmit, values} = UseForm(loginUserCallback, {\n        username: '',\n        password: ''\n    } )\n        const[loginUser , {loading}] = useMutation(LOGIN_USER, { \n            update(_,{data: {login:userData}}){\n                console.log(userData);\n                context.login(userData)\n                props.history.push('/') \n            },\n            onError(err){\n       \n                console.log(err.graphQLErrors[0].extensions.exception.errors);\n                setErrors(err.graphQLErrors[0].extensions.exception.errors);\n            \n                \n            }, \n            variables: values\n        })\n    \n\n        function loginUserCallback() {\n            loginUser ()\n        }\n\n      \n\n\n    return (\n    <div className='form-ui login-container' >\n        <Form className='form-ui' onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"} >\n            <h1>Login</h1>\n            <Form.Input label='username' placeholder='Username..' name='username' value={values.username} error={errors.username ? true : false} onChange={onChange}/>\n            <Form.Input type='password' label='Password' placeholder='Password..' name='password' error={errors.password ? true : false} value={values.password} onChange={onChange}/>\n            <Button type='submit' primary >\n                Login\n            </Button>\n        </Form>\n       {Object.keys(errors).length > 0 && (\n            <div className='ui error message'>\n            <ul className='list'>\n                {Object.values(errors).map(value=>(\n                <li key={value}>{value}</li>\n                ))}\n            </ul>\n        </div>\n       )}\n    </div>\n    )\n}\n\n//firs define data type \n//second define register input and asign the variables which you defined at first step\n//third return callback\nconst LOGIN_USER = gql`\n    mutation login(\n        $username : String!\n        $password : String!\n    ){\n        login(\n            \n                username: $username\n                password: $password\n            \n        ){\n            id email username createdAt token \n        }\n    }\n`\n\nexport default Login; "]},"metadata":{},"sourceType":"module"}